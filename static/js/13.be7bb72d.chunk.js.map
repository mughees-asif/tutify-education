{"version":3,"sources":["shared/components/DialogTitleWithCloseIcon.js","shared/components/FormDialog.js","logged_in/components/subscription/stripe/StripeTextField.js","logged_in/components/subscription/stripe/StripeCardForm.js","logged_in/components/subscription/stripe/StripeIBANForm.js","logged_in/components/subscription/AddBalanceDialog.js","shared/components/ColoredButton.js"],"names":["withTheme","props","theme","paddingBottom","onClose","disabled","title","disablePadding","DialogTitle","style","spacing","paddingLeft","paddingRight","paddingTop","width","disableTypography","Box","display","justifyContent","Typography","variant","IconButton","onClick","marginRight","marginTop","withStyles","dialogPaper","flexDirection","alignItems","maxWidth","actions","dialogPaperScrollPaper","maxHeight","dialogContent","classes","open","loading","headline","onFormSubmit","content","hideBackdrop","Dialog","disableBackdropClick","disableEscapeKeyDown","paper","paperScrollPaper","DialogContent","className","onSubmit","MyInputComponent","Component","component","inputRef","other","React","useImperativeHandle","focus","stripeOptions","StripeElement","select","rest","options","base","typography","body1","color","palette","text","primary","fontSize","fontSmoothing","secondary","invalid","iconColor","error","main","TextField","InputLabelProps","shrink","InputProps","inputComponent","inputProps","StripeCardForm","stripeError","setStripeError","amount","amountError","onAmountChange","name","setName","Grid","container","justify","item","xs","margin","required","label","value","onChange","event","target","fullWidth","autoFocus","autoComplete","type","parseInt","helperText","startAdornment","InputAdornment","position","CardElement","StripeIBANForm","email","setEmail","IbanElement","supportedCountries","stripePromise","loadStripe","paymentOptions","AddBalanceDialog","useState","setLoading","paymentOption","setPaymentOption","setAmount","setAmountError","elements","useElements","stripe","useStripe","getStripePaymentInfo","card","getElement","billing_details","sepa_debit","Error","onSuccess","FormDialog","a","preventDefault","createPaymentMethod","message","pb","mb","map","option","key","ColoredButton","disableElevation","common","black","HighlightedInformation","renderPaymentComponent","Button","size","ButtonCircularProgress","Wrapper","children","buttonTheme","createMuiTheme","buttonProps"],"mappings":"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","file":"static/js/13.be7bb72d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  IconButton,\n  DialogTitle,\n  Typography,\n  Box,\n  withTheme\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nfunction DialogTitleWithCloseIcon(props) {\n  const {\n    theme,\n    paddingBottom,\n    onClose,\n    disabled,\n    title,\n    disablePadding\n  } = props;\n  return (\n    <DialogTitle\n      style={{\n        paddingBottom: paddingBottom\n          ? paddingBottom && disablePadding\n            ? 0\n            : paddingBottom\n          : theme.spacing(3),\n        paddingLeft: disablePadding ? 0 : null,\n        paddingRight: disablePadding ? 0 : null,\n        paddingTop: disablePadding ? 0 : theme.spacing(2),\n        width: \"100%\"\n      }}\n      disableTypography\n    >\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h5\">{title}</Typography>\n        <IconButton\n          onClick={onClose}\n          style={{ marginRight: -12, marginTop: -10 }}\n          disabled={disabled}\n        >\n          <CloseIcon />\n        </IconButton>\n      </Box>\n    </DialogTitle>\n  );\n}\n\nDialogTitleWithCloseIcon.propTypes = {\n  theme: PropTypes.object,\n  paddingBottom: PropTypes.number,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  title: PropTypes.string,\n  disablePadding: PropTypes.bool\n};\n\nexport default withTheme(DialogTitleWithCloseIcon);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dialog, DialogContent, Box, withStyles } from \"@material-ui/core\";\nimport DialogTitleWithCloseIcon from \"./DialogTitleWithCloseIcon\";\n\nconst styles = theme => ({\n  dialogPaper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    paddingBottom: theme.spacing(3),\n    maxWidth: 420\n  },\n  actions: {\n    marginTop: theme.spacing(2)\n  },\n  dialogPaperScrollPaper: {\n    maxHeight: \"none\"\n  },\n  dialogContent: {\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\n/**\n * A Wrapper around the Dialog component to create centered\n * Login, Register or other Dialogs.\n */\nfunction FormDialog(props) {\n  const {\n    classes,\n    open,\n    onClose,\n    loading,\n    headline,\n    onFormSubmit,\n    content,\n    actions,\n    hideBackdrop\n  } = props;\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      disableBackdropClick={loading}\n      disableEscapeKeyDown={loading}\n      classes={{\n        paper: classes.dialogPaper,\n        paperScrollPaper: classes.dialogPaperScrollPaper\n      }}\n      hideBackdrop={hideBackdrop ? hideBackdrop : false}\n    >\n      <DialogTitleWithCloseIcon\n        title={headline}\n        onClose={onClose}\n        disabled={loading}\n      />\n      <DialogContent className={classes.dialogContent}>\n        <form onSubmit={onFormSubmit}>\n          <div>{content}</div>\n          <Box width=\"100%\" className={classes.actions}>\n            {actions}\n          </Box>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nFormDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  headline: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  content: PropTypes.element.isRequired,\n  actions: PropTypes.element.isRequired,\n  hideBackdrop: PropTypes.bool.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(FormDialog);\n","import React from \"react\";\nimport { TextField, withTheme } from \"@material-ui/core\";\n\nfunction MyInputComponent(props) {\n  const { component: Component, inputRef, ...other } = props;\n\n  // implement `InputElement` interface\n  React.useImperativeHandle(inputRef, () => ({\n    focus: () => {\n      // logic to focus the rendered component from 3rd party belongs here\n    }\n    // hiding the value e.g. react-stripe-elements\n  }));\n\n  // `Component` will be your `SomeThirdPartyComponent` from below\n  return <Component {...other} />;\n}\n\nfunction StripeTextField(props) {\n  const { stripeOptions, StripeElement, select, theme, ...rest } = props;\n  const options = {\n    style: {\n      base: {\n        ...theme.typography.body1,\n        color: theme.palette.text.primary,\n        fontSize: \"16px\",\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: theme.palette.text.secondary\n        }\n      },\n      invalid: {\n        iconColor: theme.palette.error.main,\n        color: theme.palette.error.main\n      }\n    },\n    ...stripeOptions\n  };\n  return (\n    <TextField\n      InputLabelProps={{\n        shrink: true\n      }}\n      InputProps={{\n        inputComponent: MyInputComponent,\n        inputProps: { component: StripeElement, options: options }\n      }}\n      {...rest}\n    />\n  );\n}\n\nexport default withTheme(StripeTextField);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@material-ui/core\";\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport StripeTextField from \"./StripeTextField\";\n\nfunction StripeCardForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName\n  } = props;\n  return (\n    <Grid container spacing={2} justify=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          fullWidth\n          label=\"Credit Card\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          variant=\"outlined\"\n          required\n          StripeElement={CardElement}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeCardForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired\n};\n\nexport default StripeCardForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@material-ui/core\";\nimport StripeTextField from \"./StripeTextField\";\nimport { IbanElement } from \"@stripe/react-stripe-js\";\n\nfunction StripeIBANForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName,\n    email,\n    setEmail\n  } = props;\n  return (\n    <Grid container spacing={2} justify=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          required\n          variant=\"outlined\"\n          fullWidth\n          value={email}\n          onChange={event => {\n            setEmail(event.target.value);\n          }}\n          type=\"email\"\n          margin=\"none\"\n          label=\"Email\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          variant=\"outlined\"\n          fullWidth\n          label=\"IBAN\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          required\n          StripeElement={IbanElement}\n          stripeOptions={{ supportedCountries: [\"SEPA\"] }}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeIBANForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  setEmail: PropTypes.func.isRequired\n};\n\nexport default StripeIBANForm;\n","import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  IbanElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { Grid, Button, Box, withTheme } from \"@material-ui/core\";\nimport StripeCardForm from \"./stripe/StripeCardForm\";\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport ColoredButton from \"../../../shared/components/ColoredButton\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\n\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\n\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\n\nconst AddBalanceDialog = withTheme(function(props) {\n  const [loading, setLoading] = useState(false);\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\n  const [stripeError, setStripeError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [amountError, setAmountError] = useState(\"\");\n  const elements = useElements();\n  const stripe = useStripe();\n\n  const onAmountChange = amount => {\n    if (amount < 0) {\n      return;\n    }\n    if (amountError) {\n      setAmountError(\"\");\n    }\n    setAmount(amount);\n  };\n\n  const getStripePaymentInfo = () => {\n    switch (paymentOption) {\n      case \"Credit Card\": {\n        return {\n          type: \"card\",\n          card: elements.getElement(CardElement),\n          billing_details: { name: name }\n        };\n      }\n      case \"SEPA Direct Debit\": {\n        return {\n          type: \"sepa_debit\",\n          sepa_debit: elements.getElement(IbanElement),\n          billing_details: { email: email, name: name }\n        };\n      }\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const renderPaymentComponent = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeCardForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                name={name}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the credit card number{\" \"}\n              <b>4242 4242 4242 4242 04 / 24 24 242 42424</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      case \"SEPA Direct Debit\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeIbanForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                setEmail={setEmail}\n                name={name}\n                email={email}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the IBAN\n              <br />\n              <b>DE89370400440532013000</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const { open, theme, onClose, onSuccess } = props;\n  return (\n    <FormDialog\n      open={open}\n      onClose={onClose}\n      headline=\"Add Balance\"\n      hideBackdrop={false}\n      loading={loading}\n      onFormSubmit={async event => {\n        event.preventDefault();\n        if (amount <= 0) {\n          setAmountError(\"Can't be zero\");\n          return;\n        }\n        if (stripeError) {\n          setStripeError(\"\");\n        }\n        setLoading(true);\n        const { error } = await stripe.createPaymentMethod(\n          getStripePaymentInfo()\n        );\n        if (error) {\n          setStripeError(error.message);\n          setLoading(false);\n          return;\n        }\n        onSuccess();\n      }}\n      content={\n        <Box pb={2}>\n          <Box mb={2}>\n            <Grid container spacing={1}>\n              {paymentOptions.map(option => (\n                <Grid item key={option}>\n                  <ColoredButton\n                    variant={\n                      option === paymentOption ? \"contained\" : \"outlined\"\n                    }\n                    disableElevation\n                    onClick={() => {\n                      setStripeError(\"\");\n                      setPaymentOption(option);\n                    }}\n                    color={theme.palette.common.black}\n                  >\n                    {option}\n                  </ColoredButton>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n          {renderPaymentComponent()}\n        </Box>\n      }\n      actions={\n        <Fragment>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            size=\"large\"\n            disabled={loading}\n          >\n            Pay with Stripe {loading && <ButtonCircularProgress />}\n          </Button>\n        </Fragment>\n      }\n    />\n  );\n});\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nfunction Wrapper(props) {\n  const { open, onClose, onSuccess } = props;\n  return (\n    <Elements stripe={stripePromise}>\n      {open && (\n        <AddBalanceDialog open={open} onClose={onClose} onSuccess={onSuccess} />\n      )}\n    </Elements>\n  );\n}\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default Wrapper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createMuiTheme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  });\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <MuiThemeProvider theme={buttonTheme}>\n      <Button {...buttonProps} color=\"primary\">\n        {children}\n      </Button>\n    </MuiThemeProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default ColoredButton;\n"],"sourceRoot":""}